8ee8c1b6-9932-48b5-9beb-f7817023fd31


I'll help you create a template or starter configuration that you can use for future projects. Here are a few approaches:

1. **Create a package.json template**

Save this as `template-package.json`:
```json
{
  "name": "react-tailwind-starter",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "devDependencies": {
    "@types/react": "^18.2.0",
    "@types/react-dom": "^18.2.0",
    "@vitejs/plugin-react": "^4.3.4",
    "autoprefixer": "^10.4.16",
    "eslint": "^9.21.0",
    "eslint-plugin-react-hooks": "^5.1.0",
    "eslint-plugin-react-refresh": "^0.4.19",
    "postcss": "^8.4.31",
    "tailwindcss": "^3.3.0",
    "vite": "^6.2.0"
  },
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0"
  }
}
```

2. **Create a shell script** 

Save this as `create-react-tailwind-app.sh`:
```bash
#!/bin/bash

# Check if project name is provided
if [ -z "$1" ]
then
    echo "Please provide a project name"
    echo "Usage: ./create-react-tailwind-app.sh my-app"
    exit 1
fi

PROJECT_NAME=$1

# Create Vite project
npm create vite@latest $PROJECT_NAME -- --template react

# Navigate to project directory
cd $PROJECT_NAME

# Install exact versions of dependencies
npm install react@18.2.0 react-dom@18.2.0
npm install -D tailwindcss@3.3.0 postcss@8.4.31 autoprefixer@10.4.16 @types/react@18.2.0 @types/react-dom@18.2.0

# Initialize Tailwind CSS
npx tailwindcss init -p

# Create proper configuration files
echo '/** @type {import("tailwindcss").Config} */
export default {
    content: [
        "./index.html",
        "./src/**/*.{js,ts,jsx,tsx}",
    ],
    theme: {
        extend: {},
    },
    plugins: [],
}' > tailwind.config.js

echo 'export default {
    plugins: {
        tailwindcss: {},
        autoprefixer: {},
    },
}' > postcss.config.js

# Update index.css with Tailwind directives
echo '@tailwind base;
@tailwind components;
@tailwind utilities;' > src/index.css

echo "Project $PROJECT_NAME created successfully!"
echo "cd $PROJECT_NAME && npm run dev to start"
```

3. **Create an npm init template**

Save this as `react-tailwind-template.js`:
```javascript
#! /usr/bin/env node

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

const projectName = process.argv[2];

if (!projectName) {
  console.error('Please provide a project name');
  process.exit(1);
}

const dependencies = {
  react: '18.2.0',
  'react-dom': '18.2.0'
};

const devDependencies = {
  tailwindcss: '3.3.0',
  postcss: '8.4.31',
  autoprefixer: '10.4.16',
  '@types/react': '18.2.0',
  '@types/react-dom': '18.2.0'
};

console.log(`Creating project ${projectName}...`);

execSync(`npm create vite@latest ${projectName} -- --template react`);
process.chdir(projectName);

console.log('Installing dependencies...');
Object.entries(dependencies).forEach(([pkg, version]) => {
  execSync(`npm install ${pkg}@${version}`);
});

console.log('Installing dev dependencies...');
Object.entries(devDependencies).forEach(([pkg, version]) => {
  execSync(`npm install -D ${pkg}@${version}`);
});

// Create configuration files
const tailwindConfig = `/** @type {import('tailwindcss').Config} */
export default {
    content: [
        "./index.html",
        "./src/**/*.{js,ts,jsx,tsx}",
    ],
    theme: {
        extend: {},
    },
    plugins: [],
}`;

const postcssConfig = `export default {
    plugins: {
        tailwindcss: {},
        autoprefixer: {},
    },
}`;

fs.writeFileSync('tailwind.config.js', tailwindConfig);
fs.writeFileSync('postcss.config.js', postcssConfig);

// Update index.css
const tailwindDirectives = `@tailwind base;
@tailwind components;
@tailwind utilities;`;

fs.writeFileSync('src/index.css', tailwindDirectives);

console.log('Setup complete! ðŸŽ‰');
console.log(`
To get started:
  cd ${projectName}
  npm run dev
`);
```

To use these tools:

1. **Using the shell script**:
```bash
# Make the script executable
chmod +x create-react-tailwind-app.sh

# Create a new project
./create-react-tailwind-app.sh my-new-project
```

2. **Using package.json template**:
```bash
# Create new project
npm create vite@latest my-new-project -- --template react
cd my-new-project

# Copy template-package.json content
cp ../template-package.json package.json

# Install dependencies
npm install
```

3. **Using npm init template**:
```bash
# Make the script executable
chmod +x react-tailwind-template.js

# Create new project
./react-tailwind-template.js my-new-project
```

I recommend using the shell script approach as it's the most straightforward and easiest to maintain. You can save it somewhere in your system and create an alias in your `.bashrc` or `.zshrc`:

```bash
alias create-react-app="~/scripts/create-react-tailwind-app.sh"
```

Then you can create new projects simply with:
```bash
create-react-app my-new-project
```

Would you like me to explain any part of these solutions in more detail?
